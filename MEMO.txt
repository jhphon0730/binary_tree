#. (main)에 로딩 스패너 추가 [ 프론트 ]

#. 커플 공유 정보 수정 기능 추가 ( 연애 시작일, 커플명 등 ) 
# - 연애 시작일 수정하는 기능 추가 [ 백엔드 및 프론트 ]
# - 두 커플의 공유 메시지 수정하는 기능 추가 [ OK, 프론트 작업 하면 됨 ]
# - 두 커플의 공유 프로필 사진 수정하는 기능 추가 [ 백엔드 및 프론트 ]

1. 사용자 프로필 페이지 구현:
1. 사용자 정보 표시 및 수정 기능 [ 프론트만 하면 됨 ]
2. 커플 사용자 정보 표시 기능 [ 프론트만 하면 됨 ]


3. 다이어리 기능 구현:
1. 일기 작성, 조회, 수정, 삭제 (CRUD) 기능
2. 날짜별 일기 조회 기능
3. 공유 일기 작성 기능 (두 사람이 함께 작성)

4. 캘린더 기능:
1. 월별, 주별 캘린더 뷰
2. 일정 추가, 수정, 삭제 기능
3. 기념일 표시 기능

5. 사진 갤러리:
1. 사진 업로드 및 관리 기능
2. 앨범 생성 및 정리 기능

6. 메시지 또는 채팅 기능:
1. 실시간 또는 비실시간 메시지 교환 기능

7. 알림 시스템:
1. 중요 일정, 기념일, 새 메시지 등에 대한 알림 기능

8. 통계 및 분석:
1. 관계 기간, 만난 횟수, 특별한 날 등의 통계 제공

9. 설정 페이지:
1. 앱 테마 변경, 알림 설정, 개인정보 설정 등

10. 검색 기능:
1. 일기, 일정, 사진 등을 검색할 수 있는 기능


1. 사용자 프로필 페이지
2. 커플 연결 기능
3. 다이어리 CRUD 기능
4. 간단한 캘린더 기능

---------------------------

순서 괜찮아 보이는데, 좀 더 효율적인 흐름을 생각하면 이렇게 조정할 수도 있을 것 같아.

커플 연결 기능

이게 핵심적인 관계 기반이니까 먼저 구현하는 게 좋을 듯.
연결이 안 되면 다이어리, 일정 공유 같은 기능이 의미 없으니까.
사용자 프로필 페이지

커플 연결 후에는 프로필이 자연스럽게 필요해질 거고,
프로필 수정/업로드 기능이 나중 기능들(다이어리, 갤러리)에서도 활용될 가능성이 큼.
다이어리 CRUD 기능

이제 사용자 연결되고 프로필도 되면, 실제 기능적인 핵심 요소인 다이어리를 구현하는 게 좋겠지.
기본 CRUD부터 시작해서 공유 기능은 후순위로 둬도 괜찮을 듯.
간단한 캘린더 기능

다이어리랑 캘린더는 연관이 깊으니까, 다이어리 CRUD가 되면 캘린더 뷰도 자연스럽게 이어질 거야.
월/주 단위 뷰랑 일정 추가 정도까지 먼저 하고, 이후에 기념일/알림 같은 건 추가 개발.
이렇게 하면 커플 연결 → 프로필 → 다이어리 → 캘린더 순으로 기능이 자연스럽게 확장될 것 같아. 어떻게 생각해?

----------------------------------

# 사용자 프로필 페이지:
- 기본 사용자 정보 표시 (이름, 이메일, 가입일 등)
- 프로필 사진 업로드 및 변경 기능
- 커플 정보 표시 (연결된 파트너 정보, 연애 시작일 등)
- 프로필 정보 수정 기능

# 다이어리 CRUD 기능:
- 일기 작성 페이지 (제목, 내용, 날짜, 감정 상태 등)
- 일기 목록 페이지 (날짜별 정렬, 페이지네이션)
- 일기 상세 보기 페이지
- 일기 수정 및 삭제 기능
- (선택적) 간단한 태그 기능

# 간단한 캘린더 기능:
- 월별 캘린더 뷰 구현
- 일정 추가 기능 (제목, 날짜, 시간, 설명)
- 캘린더에 일기 및 일정 표시
- 일정 상세 보기, 수정, 삭제 기능
